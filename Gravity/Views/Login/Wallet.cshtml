@model ICollection<Wallet>

@{ 
    int i = 0;
}

<div class="container-fluid">
    <div class="page-header">
        <div class="row align-items-end">
            <div class="col-lg-8">
                <div class="page-header-title">
                    <i class="ik ik-plus-circle bg-dark"></i>
                    <div class="d-inline">
                        <h5> Wallet (GCH)</h5>
                        <span>Gravity Cash Wallet</span>
                    </div>
                </div>
            </div>
            <div class="col-lg-4">
                <nav class="breadcrumb-container" aria-label="breadcrumb">
                    <ol class="breadcrumb">

                        <li class="breadcrumb-item">
                            <a href="/Wallet/Create?userId=@User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier).Value" class="btn btn-primary"><i class="ik ik-plus-circle"></i> Create Address</a>
                        </li>

                    </ol>
                </nav>
            </div>
        </div>
    </div>


    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header d-block">
                    <h3>GCH Address List</h3>

                </div>
                <div class="card-body p-0 table-border-style">
                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>SN</th>
                                    <th>Wallet Address</th>

                                    <th>Balance(GCH)</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model)
                                {
                                    i++;

                                    <tr>
                                        <th scope="row">@i</th>
                                        <td>@item.PublicKey</td>
                                        <td class="totalCoin" key="@item.PublicKey"></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>


        </div>
    </div>
</div>



<script type="text/javascript">


    async function getBalance(addr) {
        addr = '0x45BD27bB68B07FE9541B26955d880b70df34B960';

        return r;
    }

    $(function () {
        $('.totalCoin').each(async function (i, obj) {
            //test
            var $this = $(this);
            var addr = $this.attr('key');
            var val = await contract.balanceOf(addr);
            //alert(val)
            //var r = val.toHexString();
            val = parseInt(val.toString()) / 10 ** 18;
            $this.html(val);
        });
    })





            @*console.log(str);
            var jso = JSON.parse(str);
    let privateKey = "@Admin.PrivateKey";
             function bb() {
                let provider = ethers.getDefaultProvider("rinkeby");

                let walletWithProvider = new ethers.Wallet(privateKey, provider);
                console.log(walletWithProvider);

                let contract = new ethers.Contract(ContractAddress, abi, provider);
                let contractWithSigner = contract.connect(walletWithProvider);
                console.log(contractWithSigner);
                var tc = null;
                var txd = contractWithSigner.transferArray(jso.signs, jso._toes, jso._values, jso._fees, jso._nonces).then((txd) => {
                    tc = txd;
                    console.log(txd);
                    //alert(txd);
                });

                return tc;
            }*@




</script>

@*<script>


    var contractAddress="0xd8b8728bd30c5ecf8a4688bdbfdf416be702bfc8"
    var contractAbi= [{"constant":false,"inputs":[{"name":"newSellPrice","type":"uint256"},{"name":"newBuyPrice","type":"uint256"}],"name":"setPrices","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_value","type":"uint256"}],"name":"burn","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"sellPrice","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"target","type":"address"},{"name":"mintedAmount","type":"uint256"}],"name":"mintToken","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_value","type":"uint256"}],"name":"burnFrom","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"buyPrice","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"buy","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"frozenAccount","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"},{"name":"_extraData","type":"bytes"}],"name":"approveAndCall","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"},{"name":"","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"amount","type":"uint256"}],"name":"sell","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"target","type":"address"},{"name":"freeze","type":"bool"}],"name":"freezeAccount","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"inputs":[{"name":"initialSupply","type":"uint256"},{"name":"tokenName","type":"string"},{"name":"tokenSymbol","type":"string"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"name":"target","type":"address"},{"indexed":false,"name":"frozen","type":"bool"}],"name":"FrozenFunds","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_owner","type":"address"},{"indexed":true,"name":"_spender","type":"address"},{"indexed":false,"name":"_value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Burn","type":"event"}];

    var CONTRACT = web3.eth.contract(contractAbi).at(contractAddress, (err, ctr) => {
      return ctr;
    });

    console.log(CONTRACT);

    var $addr=$('#addr');
    var $blnc=$('#blnc');
    var $tkn=$('#tkn');

    $addr.html('0x00');
    $blnc.html('0');
    $tkn.html('0');

    var coinbase = CONTRACT._eth.coinbase;

    $addr.html(coinbase);

    getEtherBalance();
    getTokenBalance();



    function getEtherBalance () {
          CONTRACT._eth.getBalance(coinbase, (err, bal) => {
            if (!err) {
              var balance = web3.fromWei(bal, 'ether').toNumber();
              $blnc.html(balance);
            }
            console.log(err)
          })
        }

    function getTokenBalance () {
          CONTRACT.balanceOf(coinbase, (err, tkns) => {
            if (!err) {
              var tokens = web3.fromWei(tkns, 'ether').toNumber();
              $tkn.html(tokens);
            }
            console.log(err)
          })
        }


    </script>*@
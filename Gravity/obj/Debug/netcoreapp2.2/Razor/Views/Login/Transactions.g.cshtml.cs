#pragma checksum "C:\Users\toufi\Desktop\CrowdSale\Gravity\Views\Login\Transactions.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "711d393273c6c369d0acd2fd5c54c2766284c547"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Login_Transactions), @"mvc.1.0.view", @"/Views/Login/Transactions.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Login/Transactions.cshtml", typeof(AspNetCore.Views_Login_Transactions))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\toufi\Desktop\CrowdSale\Gravity\Views\_ViewImports.cshtml"
using Gravity;

#line default
#line hidden
#line 2 "C:\Users\toufi\Desktop\CrowdSale\Gravity\Views\_ViewImports.cshtml"
using Gravity.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"711d393273c6c369d0acd2fd5c54c2766284c547", @"/Views/Login/Transactions.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"07cf0a217bd801a86d29a3073d3b6b421cdc174d", @"/Views/_ViewImports.cshtml")]
    public class Views_Login_Transactions : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 1 "C:\Users\toufi\Desktop\CrowdSale\Gravity\Views\Login\Transactions.cshtml"
  
    List<string> publicKeys = ViewBag.publicKeys;
    string json_obj = Newtonsoft.Json.JsonConvert.SerializeObject(publicKeys.ToArray());

#line default
#line hidden
            BeginContext(148, 2276, true);
            WriteLiteral(@"
<!-- BREADCRUMB-->
<section class=""au-breadcrumb m-t-75"">
    <div class=""section__content section__content--p30"">
        <div class=""container-fluid"">
            <div class=""row"">
                <div class=""col-md-12"">
                    <div class=""au-breadcrumb-content"">
                        <div class=""au-breadcrumb-left"">
                            <span class=""au-breadcrumb-span"">You are here:</span>
                            <ul class=""list-unstyled list-inline au-breadcrumb__list"">
                                <li class=""list-inline-item active"">
                                    <a href=""#"">Wallet</a>
                                </li>
                                <li class=""list-inline-item seprate"">
                                    <span>/</span>
                                </li>
                                <li class=""list-inline-item"">Transactions</li>
                            </ul>
                        </div>

                    </div>");
            WriteLiteral(@"
                </div>
            </div>
        </div>
    </div>
</section>
<!-- END BREADCRUMB-->
<section class=""section__content section__content--p30 container-fluid"">
    <input value=""Load Transactions"" class=""btn btn-info"" id=""btnInput"" type=""button"" />
    <br>
</section>
<section>
    <div class=""section__content section__content--p30"">

        <div class=""container-fluid"">
            <div class=""row"">
                <div class=""col-lg-12"">
                    <div class=""table-responsive table--no-card m-b-30"">
                        <table class=""table table-borderless table-striped table-earning"">
                            <thead>
                                <tr>
                                    <th class="""">To Address</th>
                                    <th class="""">From Address</th>
                                    <th class="""">Amount (GCH) </th>
                                </tr>
                            </thead>
                          ");
            WriteLiteral("  <tbody id=\"trns\"></tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n\r\n\r\n\r\n\r\n        </div>\r\n        </div>\r\n</section>\r\n\r\n\r\n\r\n\r\n<script>\r\n    var addresses = (");
            EndContext();
            BeginContext(2425, 36, false);
#line 70 "C:\Users\toufi\Desktop\CrowdSale\Gravity\Views\Login\Transactions.cshtml"
                Write(Html.Raw(Json.Serialize(publicKeys)));

#line default
#line hidden
            EndContext();
            BeginContext(2461, 144, true);
            WriteLiteral(");\r\n    console.log(addresses);\r\n    var tmp = addresses.join(\'~\').toLowerCase();\r\n    addresses = tmp.split(\'~\');\r\n    //var jso = JSON.parse(\'");
            EndContext();
            BeginContext(2606, 8, false);
#line 74 "C:\Users\toufi\Desktop\CrowdSale\Gravity\Views\Login\Transactions.cshtml"
                       Write(json_obj);

#line default
#line hidden
            EndContext();
            BeginContext(2614, 8009, true);
            WriteLiteral(@"');
    //var contractAddress = ""0xd8b8728bd30c5ecf8a4688bdbfdf416be702bfc8""
    //var contractAbi = [{ ""constant"": false, ""inputs"": [{ ""name"": ""newSellPrice"", ""type"": ""uint256"" }, { ""name"": ""newBuyPrice"", ""type"": ""uint256"" }], ""name"": ""setPrices"", ""outputs"": [], ""payable"": false, ""stateMutability"": ""nonpayable"", ""type"": ""function"" }, { ""constant"": true, ""inputs"": [], ""name"": ""name"", ""outputs"": [{ ""name"": """", ""type"": ""string"" }], ""payable"": false, ""stateMutability"": ""view"", ""type"": ""function"" }, { ""constant"": false, ""inputs"": [{ ""name"": ""_spender"", ""type"": ""address"" }, { ""name"": ""_value"", ""type"": ""uint256"" }], ""name"": ""approve"", ""outputs"": [{ ""name"": ""success"", ""type"": ""bool"" }], ""payable"": false, ""stateMutability"": ""nonpayable"", ""type"": ""function"" }, { ""constant"": true, ""inputs"": [], ""name"": ""totalSupply"", ""outputs"": [{ ""name"": """", ""type"": ""uint256"" }], ""payable"": false, ""stateMutability"": ""view"", ""type"": ""function"" }, { ""constant"": false, ""inputs"": [{ ""name"": ""_from"", ""type"": ""address"" }, { ""name"": ""_to"",");
            WriteLiteral(@" ""type"": ""address"" }, { ""name"": ""_value"", ""type"": ""uint256"" }], ""name"": ""transferFrom"", ""outputs"": [{ ""name"": ""success"", ""type"": ""bool"" }], ""payable"": false, ""stateMutability"": ""nonpayable"", ""type"": ""function"" }, { ""constant"": true, ""inputs"": [], ""name"": ""decimals"", ""outputs"": [{ ""name"": """", ""type"": ""uint8"" }], ""payable"": false, ""stateMutability"": ""view"", ""type"": ""function"" }, { ""constant"": false, ""inputs"": [{ ""name"": ""_value"", ""type"": ""uint256"" }], ""name"": ""burn"", ""outputs"": [{ ""name"": ""success"", ""type"": ""bool"" }], ""payable"": false, ""stateMutability"": ""nonpayable"", ""type"": ""function"" }, { ""constant"": true, ""inputs"": [], ""name"": ""sellPrice"", ""outputs"": [{ ""name"": """", ""type"": ""uint256"" }], ""payable"": false, ""stateMutability"": ""view"", ""type"": ""function"" }, { ""constant"": true, ""inputs"": [{ ""name"": """", ""type"": ""address"" }], ""name"": ""balanceOf"", ""outputs"": [{ ""name"": """", ""type"": ""uint256"" }], ""payable"": false, ""stateMutability"": ""view"", ""type"": ""function"" }, { ""constant"": false, ""inputs"": [{ ""name"": ""target"", ""typ");
            WriteLiteral(@"e"": ""address"" }, { ""name"": ""mintedAmount"", ""type"": ""uint256"" }], ""name"": ""mintToken"", ""outputs"": [], ""payable"": false, ""stateMutability"": ""nonpayable"", ""type"": ""function"" }, { ""constant"": false, ""inputs"": [{ ""name"": ""_from"", ""type"": ""address"" }, { ""name"": ""_value"", ""type"": ""uint256"" }], ""name"": ""burnFrom"", ""outputs"": [{ ""name"": ""success"", ""type"": ""bool"" }], ""payable"": false, ""stateMutability"": ""nonpayable"", ""type"": ""function"" }, { ""constant"": true, ""inputs"": [], ""name"": ""buyPrice"", ""outputs"": [{ ""name"": """", ""type"": ""uint256"" }], ""payable"": false, ""stateMutability"": ""view"", ""type"": ""function"" }, { ""constant"": true, ""inputs"": [], ""name"": ""owner"", ""outputs"": [{ ""name"": """", ""type"": ""address"" }], ""payable"": false, ""stateMutability"": ""view"", ""type"": ""function"" }, { ""constant"": true, ""inputs"": [], ""name"": ""symbol"", ""outputs"": [{ ""name"": """", ""type"": ""string"" }], ""payable"": false, ""stateMutability"": ""view"", ""type"": ""function"" }, { ""constant"": false, ""inputs"": [], ""name"": ""buy"", ""outputs"": [], ""payable"": true, ""stateMu");
            WriteLiteral(@"tability"": ""payable"", ""type"": ""function"" }, { ""constant"": false, ""inputs"": [{ ""name"": ""_to"", ""type"": ""address"" }, { ""name"": ""_value"", ""type"": ""uint256"" }], ""name"": ""transfer"", ""outputs"": [{ ""name"": ""success"", ""type"": ""bool"" }], ""payable"": false, ""stateMutability"": ""nonpayable"", ""type"": ""function"" }, { ""constant"": true, ""inputs"": [{ ""name"": """", ""type"": ""address"" }], ""name"": ""frozenAccount"", ""outputs"": [{ ""name"": """", ""type"": ""bool"" }], ""payable"": false, ""stateMutability"": ""view"", ""type"": ""function"" }, { ""constant"": false, ""inputs"": [{ ""name"": ""_spender"", ""type"": ""address"" }, { ""name"": ""_value"", ""type"": ""uint256"" }, { ""name"": ""_extraData"", ""type"": ""bytes"" }], ""name"": ""approveAndCall"", ""outputs"": [{ ""name"": ""success"", ""type"": ""bool"" }], ""payable"": false, ""stateMutability"": ""nonpayable"", ""type"": ""function"" }, { ""constant"": true, ""inputs"": [{ ""name"": """", ""type"": ""address"" }, { ""name"": """", ""type"": ""address"" }], ""name"": ""allowance"", ""outputs"": [{ ""name"": """", ""type"": ""uint256"" }], ""payable"": false, ""stateMutability"": ");
            WriteLiteral(@"""view"", ""type"": ""function"" }, { ""constant"": false, ""inputs"": [{ ""name"": ""amount"", ""type"": ""uint256"" }], ""name"": ""sell"", ""outputs"": [], ""payable"": false, ""stateMutability"": ""nonpayable"", ""type"": ""function"" }, { ""constant"": false, ""inputs"": [{ ""name"": ""target"", ""type"": ""address"" }, { ""name"": ""freeze"", ""type"": ""bool"" }], ""name"": ""freezeAccount"", ""outputs"": [], ""payable"": false, ""stateMutability"": ""nonpayable"", ""type"": ""function"" }, { ""constant"": false, ""inputs"": [{ ""name"": ""newOwner"", ""type"": ""address"" }], ""name"": ""transferOwnership"", ""outputs"": [], ""payable"": false, ""stateMutability"": ""nonpayable"", ""type"": ""function"" }, { ""inputs"": [{ ""name"": ""initialSupply"", ""type"": ""uint256"" }, { ""name"": ""tokenName"", ""type"": ""string"" }, { ""name"": ""tokenSymbol"", ""type"": ""string"" }], ""payable"": false, ""stateMutability"": ""nonpayable"", ""type"": ""constructor"" }, { ""anonymous"": false, ""inputs"": [{ ""indexed"": false, ""name"": ""target"", ""type"": ""address"" }, { ""indexed"": false, ""name"": ""frozen"", ""type"": ""bool"" }], ""name"": ""FrozenFunds"", ");
            WriteLiteral(@"""type"": ""event"" }, { ""anonymous"": false, ""inputs"": [{ ""indexed"": true, ""name"": ""from"", ""type"": ""address"" }, { ""indexed"": true, ""name"": ""to"", ""type"": ""address"" }, { ""indexed"": false, ""name"": ""value"", ""type"": ""uint256"" }], ""name"": ""Transfer"", ""type"": ""event"" }, { ""anonymous"": false, ""inputs"": [{ ""indexed"": true, ""name"": ""_owner"", ""type"": ""address"" }, { ""indexed"": true, ""name"": ""_spender"", ""type"": ""address"" }, { ""indexed"": false, ""name"": ""_value"", ""type"": ""uint256"" }], ""name"": ""Approval"", ""type"": ""event"" }, { ""anonymous"": false, ""inputs"": [{ ""indexed"": true, ""name"": ""from"", ""type"": ""address"" }, { ""indexed"": false, ""name"": ""value"", ""type"": ""uint256"" }], ""name"": ""Burn"", ""type"": ""event"" }];

    //var CONTRACT = web3.eth.contract(contractAbi).at(contractAddress, (err, ctr) => {
    //    return ctr;
    //});

    CONTRACT = contract;

    console.log(CONTRACT);

    var items = [];
    transactions(addresses[0]);
    $('#btnInput').click(function () {
        console.log(items);
        var tbody = $");
            WriteLiteral(@"('#trns');
        tbody.empty();
        props = [""to"", ""from"", ""amount""];
      
        $.each(items, function (i, items) {
            var tr = $('<tr>');
            
            //if (addresses.indexOf(items[""to""]) >= 0 || addresses.indexOf(items[""from""]) >= 0) {
                $.each(props, function (i, prop) {

                    $('<td>').html(items[prop]).appendTo(tr);
                });
            //}
            tbody.append(tr);
            
        });
    });

    function transactions(addr) {

        let etherscanProvider = new ethers.providers.EtherscanProvider();

        // Getting the current Ethereum price
        etherscanProvider.getEtherPrice().then(function (price) {
            console.log(""Ether price in USD: "" + price);
        });


        // Getting the transaction history of an address
        let address = '0xA6b70392346bE7fBFC33d2d098529efC2459b62D';
        let startBlock = 0;
        let endBlock = 'latest';
        etherscanProvider.get");
            WriteLiteral(@"History(address).then(function (history) {
            alert('nnn'+history)
            console.log(history);
            items.push({
                to: history.to,
                from: history.from,
                amount: history.value//ethers.utils.bigNumberify(history.value).toString()
            })
        });

        //CONTRACT.Transfer({}, { fromBlock: 0, toBlock: 'pending' }, (err, res) => {
        //    console.log(res.args);
        //    if (res.args.to === CONTRACT._eth.coinbase || res.args.from === CONTRACT._eth.coinbase) {

        //        items.push({
        //            to: res.args.to,
        //            from: res.args.from,
        //            amount: web3.fromWei(res.args.value).toNumber()
        //        })
        //    }
        //});






    }


</script>

");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
